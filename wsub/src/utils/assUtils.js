// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

var utils = {};

utils.convertToAss = function(data, withId) {
    var result = "";

    result += utils.scriptInfoToAss(data[0]);
    result += '\n'

    result += utils.stylesToAss(data[1]);
    result += '\n'

    result += utils.linesToAss(data[2], withId);

    return result;
}

utils.stylesToAss = function(styles) {
    var result = "";

    result += '[V4+ Styles]' + '\n'
    result += 'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, ' +
        'BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, ' +
        'BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding' + '\n'

    styles.forEach(function(style) {
        result += utils.styleToAss(style) + '\n'
    });

    return result;
}

utils.styleToAss = function(style) {
    var tmp = "Style: "

    tmp += style.name + ','
    tmp += style.font + ','
    tmp += style.size + ','
    tmp += utils.formatColor(style.primary_color) + ','
    tmp += utils.formatColor(style.secondary_color) + ','
    tmp += utils.formatColor(style.outline_color) + ','
    tmp += utils.formatColor(style.back_color) + ','
    tmp += (style.bold == "-1" ? -1 : 0) + ','
    tmp += (style.italic == "-1" ? -1 : 0) + ','
    tmp += (style.underline == "-1" ? -1 : 0) + ','
    tmp += (style.strike_out == "-1 "? -1 : 0) + ','
    tmp += style.scale_x + ','
    tmp += style.scale_y + ','
    tmp += style.spacing + ','
    tmp += style.angle + ','
    tmp += style.border_style + ','
    tmp += style.outline + ','
    tmp += style.shadow + ','
    tmp += style.alignment + ','
    tmp += style.margin_left + ','
    tmp += style.margin_right + ','
    tmp += style.margin_vertical + ','
    tmp += style.encoding

    return tmp;
}

utils.styleToLibjass = function(key, val) {
    switch (key) {
    	case 'name': return ['_name', val];
        case 'italic': return ['_italic', val == 1];
        case 'bold': return ['_bold', val == 1];
        case 'underline': return ['_underline', val == 1];
        case 'strike_out': return ['_strikeThrough', val == 1];
    	case 'font': return ['_fontName', val];
    	case 'size': return ['_fontSize', val];
    	case 'scale_x': return ['_fontScaleX', val / 100];
    	case 'scale_y': return ['_fontScaleY', val / 100];
    	case 'spacing': return ['_letterSpacing', val];
    	case 'angle': return ['_rotationZ', val];
    	case 'primary_color': return ['_primaryColor', styleFormatColor(val)];
    	case 'secondary_color': return ['_secondaryColor', styleFormatColor(val)];
    	case 'outline_color': return ['_outlineColor', styleFormatColor(val)];
    	case 'back_color': return ['_shadowColor', styleFormatColor(val)];
    	case 'outline': return ['_outlineThickness', val];
    	case 'border_style': return ['_borderStyle', parseInt(val)];
    	case 'shadow': return ['_shadowDepth', val];
    	case 'alignment': return ['_alignment', parseInt(val)];
    	case 'margin_left': return ['_marginLeft', val];
    	case 'margin_right': return ['_marginRight', val];
    	case 'margin_vertical': return ['_marginVertical', val];
        default: throw "Unsupported style attribute " + key;
    }
}

var styleFormatColor = function(value) {
    return libjass.parser.parse(utils.formatColor(value), 'colorWithAlpha');
}

utils.linesToAss = function(lines, withId) {
    var result = "";

    result += '[Events]' + '\n'
    result += 'Format: '
    if (withId) { result += 'AppId, ' }
    result += 'Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text' + '\n'

    lines.forEach(function(line) {
        result += utils.lineToAss(line, withId) + '\n'
    });

    return result;
}

utils.lineToAss = function(line, withId) {
    var tmp = "";

    tmp += (!line.comment ? "Dialogue" : "Comment") + ": "
    if (withId) { tmp += line.id + ',' }
    tmp += '0' + ','
    tmp += line.start + ','
    tmp += line.end + ','
    tmp += (line.style ? line.style : 'Default') + ','
    tmp += ','
    tmp += '0' + ','
    tmp += '0' + ','
    tmp += '0' + ','
    tmp += ','
    tmp += line.txt

    return tmp;
}

utils.scriptInfoToAss = function() {
    //TODO use script properties instead of static values
    var result = "";

    result += '[Script Info]' + '\n'
    result += '; Script generated by subs 0.1' + '\n'
    result += 'Title: cosa' + '\n'
    result += 'ScriptType: v4.00+' + '\n'
    result += 'WrapStyle: 0' + '\n'
    result += 'PlayResX: 640' + '\n'
    result += 'PlayResY: 480' + '\n'
    result += 'ScaledBorderAndShadow: yes' + '\n'
    result += 'YCbCr Matrix: None' + '\n'
    result += 'Last Style Storage: Default' + '\n'

    return result;
}

// 75605F00 --> &HFF5F6075
utils.formatColor = function(color) {
    var r = color.substring(0, 2);
    var g = color.substring(2, 4);
    var b = color.substring(4, 6);
    var a = 255 - parseInt(color.substring(6, 8), 16);

    a = a.toString(16)

    if (a.length == 1)
        a = '0' + a

    return "&H" + a + b + g + r;
}

module.exports = utils;
